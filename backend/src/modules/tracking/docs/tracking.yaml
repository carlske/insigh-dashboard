openapi: 3.0.3
info:
  title: INSIGH Backend API
  version: 1.0.0
  description: |
    Lightweight demo backend for **INSIGH**, built with Express, TypeScript, and MongoDB.  
    Supports authentication with JWT stored in HttpOnly cookies and service-oriented architecture.

servers:
  - url: http://localhost:4000/api

tags:
  - name: Auth
    description: Authentication and user management
  - name: Tracking
    description: Component interaction tracking
  - name: System
    description: System and health monitoring

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: carlos@example.com
                password:
                  type: string
                  example: hyroxStrong123
      responses:
        "201":
          description: User created successfully

  /auth/login:
    post:
      summary: Login user and get JWT (stored in HttpOnly cookie)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: carlos@example.com
                password:
                  type: string
                  example: hyroxStrong123
      responses:
        "200":
          description: User logged in successfully (JWT set in HttpOnly cookie)

  /auth/verify:
    get:
      summary: Verify current user's JWT from HttpOnly cookie
      description: |
        Validates the JWT stored in the HttpOnly cookie and returns user data if valid.  
        This route replaces `/auth/me` in systems where the token is sent automatically in cookies.
      tags: [Auth]
      responses:
        "200":
          description: User verified successfully
        "401":
          description: Invalid or expired token

  /auth/logout:
    post:
      summary: Logout user (invalidate cookie)
      description: |
        Since JWTs are stateless, logout is handled by clearing the HttpOnly cookie on the client.  
        This endpoint demonstrates safe logout handling in stateless systems.
      tags: [Auth]
      responses:
        "200":
          description: Logout success message

  /components/track:
    post:
      summary: Register component interaction
      tags: [Tracking]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                component:
                  type: string
                  example: Button
                variant:
                  type: string
                  example: primary
                action:
                  type: string
                  example: click
      responses:
        "201":
          description: Created

  /components/stats:
    get:
      summary: Get basic stats
      tags: [Tracking]
      responses:
        "200":
          description: OK

  /components/export:
    get:
      summary: Export tracking (auth required)
      tags: [Tracking]
      parameters:
        - in: query
          name: format
          schema:
            type: string
            enum: [csv, json]
            example: json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized

  /health:
    get:
      summary: Health check endpoint
      tags: [System]
      responses:
        "200":
          description: Returns system uptime and OK message

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt
      description: JWT stored in HttpOnly cookie

security:
  - cookieAuth: []
